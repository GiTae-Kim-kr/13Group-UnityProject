//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Utils/Object Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Backend.Utils.Input
{
    public partial class @ObjectControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ObjectControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Object Controls"",
    ""maps"": [
        {
            ""name"": ""Lever"",
            ""id"": ""262cb169-caf7-4b53-9d96-60dadbfcc6eb"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""2d4d7861-a843-4675-a247-bac8ecead7c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49f8f387-ba10-4d35-a812-23878be4c06d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Door"",
            ""id"": ""365712b1-3151-4d34-83bc-c7245cea605c"",
            ""actions"": [
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""3750b5f2-22fd-4e38-9dc4-d03f2febd83f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01a11410-5f6f-472b-a3df-b4be0cf338dd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Lever
            m_Lever = asset.FindActionMap("Lever", throwIfNotFound: true);
            m_Lever_Toggle = m_Lever.FindAction("Toggle", throwIfNotFound: true);
            // Door
            m_Door = asset.FindActionMap("Door", throwIfNotFound: true);
            m_Door_Enter = m_Door.FindAction("Enter", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Lever
        private readonly InputActionMap m_Lever;
        private List<ILeverActions> m_LeverActionsCallbackInterfaces = new List<ILeverActions>();
        private readonly InputAction m_Lever_Toggle;
        public struct LeverActions
        {
            private @ObjectControls m_Wrapper;
            public LeverActions(@ObjectControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Toggle => m_Wrapper.m_Lever_Toggle;
            public InputActionMap Get() { return m_Wrapper.m_Lever; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LeverActions set) { return set.Get(); }
            public void AddCallbacks(ILeverActions instance)
            {
                if (instance == null || m_Wrapper.m_LeverActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LeverActionsCallbackInterfaces.Add(instance);
                @Toggle.started += instance.OnToggle;
                @Toggle.performed += instance.OnToggle;
                @Toggle.canceled += instance.OnToggle;
            }

            private void UnregisterCallbacks(ILeverActions instance)
            {
                @Toggle.started -= instance.OnToggle;
                @Toggle.performed -= instance.OnToggle;
                @Toggle.canceled -= instance.OnToggle;
            }

            public void RemoveCallbacks(ILeverActions instance)
            {
                if (m_Wrapper.m_LeverActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILeverActions instance)
            {
                foreach (var item in m_Wrapper.m_LeverActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LeverActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LeverActions @Lever => new LeverActions(this);

        // Door
        private readonly InputActionMap m_Door;
        private List<IDoorActions> m_DoorActionsCallbackInterfaces = new List<IDoorActions>();
        private readonly InputAction m_Door_Enter;
        public struct DoorActions
        {
            private @ObjectControls m_Wrapper;
            public DoorActions(@ObjectControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Enter => m_Wrapper.m_Door_Enter;
            public InputActionMap Get() { return m_Wrapper.m_Door; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DoorActions set) { return set.Get(); }
            public void AddCallbacks(IDoorActions instance)
            {
                if (instance == null || m_Wrapper.m_DoorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DoorActionsCallbackInterfaces.Add(instance);
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
            }

            private void UnregisterCallbacks(IDoorActions instance)
            {
                @Enter.started -= instance.OnEnter;
                @Enter.performed -= instance.OnEnter;
                @Enter.canceled -= instance.OnEnter;
            }

            public void RemoveCallbacks(IDoorActions instance)
            {
                if (m_Wrapper.m_DoorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDoorActions instance)
            {
                foreach (var item in m_Wrapper.m_DoorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DoorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DoorActions @Door => new DoorActions(this);
        private int m_DesktopSchemeIndex = -1;
        public InputControlScheme DesktopScheme
        {
            get
            {
                if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
                return asset.controlSchemes[m_DesktopSchemeIndex];
            }
        }
        public interface ILeverActions
        {
            void OnToggle(InputAction.CallbackContext context);
        }
        public interface IDoorActions
        {
            void OnEnter(InputAction.CallbackContext context);
        }
    }
}
