//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Utilities/Character Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Backend.Utils.Input
{
    public partial class @CharacterControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CharacterControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Character Controls"",
    ""maps"": [
        {
            ""name"": ""Player 01"",
            ""id"": ""b227892e-308e-4cb4-89b6-31269a8f25f0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dbac34dc-81f1-48eb-bc94-f138d94d0ac2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""9121c1ed-8c25-49eb-8064-6134ff147a92"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direction"",
                    ""id"": ""3846035f-afc6-451d-9bf6-9abcdc8ef5fb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9f47c9d4-250d-4ae8-8308-6cd23f29b85d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d897334a-d3a4-45e6-af64-f6e8f3ef831b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""f7f4ed67-017e-4514-a1e0-f2d33cb0e054"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f58a0340-4817-4182-963c-d348d9e89d82"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player 02"",
            ""id"": ""b2b96f57-b8bf-4d3c-b366-177704361a8d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4188d3ee-5460-448a-930c-ad7531da917e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""f2d84b33-117b-40ca-9a27-f6d5066e0d94"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direction"",
                    ""id"": ""976e306a-523a-42ff-80b2-999f53dbb4df"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""683cdc2d-700d-4b2c-ba27-c7e8a7ba671d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9b310d8b-3a94-4ff7-82b8-d947efc02eac"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""bc770b4d-352a-4263-85b1-114aa8ee7c7c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9efc6293-55b0-4529-b5f1-46097d8d3115"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player 01
            m_Player01 = asset.FindActionMap("Player 01", throwIfNotFound: true);
            m_Player01_Move = m_Player01.FindAction("Move", throwIfNotFound: true);
            m_Player01_Jump = m_Player01.FindAction("Jump", throwIfNotFound: true);
            // Player 02
            m_Player02 = asset.FindActionMap("Player 02", throwIfNotFound: true);
            m_Player02_Move = m_Player02.FindAction("Move", throwIfNotFound: true);
            m_Player02_Jump = m_Player02.FindAction("Jump", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player 01
        private readonly InputActionMap m_Player01;
        private List<IPlayer01Actions> m_Player01ActionsCallbackInterfaces = new List<IPlayer01Actions>();
        private readonly InputAction m_Player01_Move;
        private readonly InputAction m_Player01_Jump;
        public struct Player01Actions
        {
            private @CharacterControls m_Wrapper;
            public Player01Actions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player01_Move;
            public InputAction @Jump => m_Wrapper.m_Player01_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Player01; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player01Actions set) { return set.Get(); }
            public void AddCallbacks(IPlayer01Actions instance)
            {
                if (instance == null || m_Wrapper.m_Player01ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player01ActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IPlayer01Actions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IPlayer01Actions instance)
            {
                if (m_Wrapper.m_Player01ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer01Actions instance)
            {
                foreach (var item in m_Wrapper.m_Player01ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player01ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player01Actions @Player01 => new Player01Actions(this);

        // Player 02
        private readonly InputActionMap m_Player02;
        private List<IPlayer02Actions> m_Player02ActionsCallbackInterfaces = new List<IPlayer02Actions>();
        private readonly InputAction m_Player02_Move;
        private readonly InputAction m_Player02_Jump;
        public struct Player02Actions
        {
            private @CharacterControls m_Wrapper;
            public Player02Actions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player02_Move;
            public InputAction @Jump => m_Wrapper.m_Player02_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Player02; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player02Actions set) { return set.Get(); }
            public void AddCallbacks(IPlayer02Actions instance)
            {
                if (instance == null || m_Wrapper.m_Player02ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player02ActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IPlayer02Actions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IPlayer02Actions instance)
            {
                if (m_Wrapper.m_Player02ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer02Actions instance)
            {
                foreach (var item in m_Wrapper.m_Player02ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player02ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player02Actions @Player02 => new Player02Actions(this);
        private int m_DesktopSchemeIndex = -1;
        public InputControlScheme DesktopScheme
        {
            get
            {
                if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
                return asset.controlSchemes[m_DesktopSchemeIndex];
            }
        }
        public interface IPlayer01Actions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IPlayer02Actions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
    }
}
